
import useAuth from "@/hooks/useAuth"
import { authService } from "@/services/authService"
import { toaster, Toaster } from "@/components/ui/toaster"
import { Box, Button, Container, Field, Fieldset, Heading, HStack, Input, Stack } from "@chakra-ui/react"
import { useEffect } from "react"
import { useForm } from "react-hook-form"
import { sendEmailVerification } from "firebase/auth"

export interface IFormInputs {
    displayName: string,
    email: string,
    password: string,
    photoURL: string
}

const ProfileEdit: React.FC = () => {

    const { user } = useAuth()
    console.log(user)
    const { mutate: updateUser } = authService.useUpdateUser()
    const {
        register,
        handleSubmit,
        watch,
        setValue,
        formState: { errors }
    } = useForm<IFormInputs>({
        mode: "all",
        defaultValues: {
            displayName: "",
            email: "",
            password: "",
            photoURL: "",
        }
    })

    useEffect(() => {
        if (user) {
            setValue("displayName", user.displayName || "")
            setValue("email", user.email || "")
            setValue("photoURL", user.photoURL || "")
        }
    }, [user, setValue])


    const onSubmit = (data: IFormInputs) => {
        console.log(data)
        updateUser(data)
    }

    return (
        <Box bgColor="Background" >
            <Toaster />
            <Container minH="calc(100vh - 70px - 40px)" pt={10} pb={10} bgColor="Background" >
                <Heading
                    as="h2"
                    mb={10}
                    size="5xl"
                    textAlign="center"
                    bgClip="text"
                    bgGradient="to-l"
                    gradientFrom="teal.500"
                    gradientTo="cyan.400">
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
                </Heading>
                <Fieldset.Root size="lg" maxW="md" m="0 auto" >
                    <Stack>
                        <Fieldset.Legend > –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è </Fieldset.Legend>
                        <Fieldset.HelperText> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∏–∂–µ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è </Fieldset.HelperText>
                    </Stack>
                    <form onSubmit={handleSubmit(onSubmit)} >
                        <Fieldset.Content >
                            <Field.Root invalid={!!errors.displayName} >
                                <Field.Label>–í–∞—à–µ –ò–º—è</Field.Label>
                                <Input
                                    _focus={errors.displayName ? { outlineColor: "border.error" } : { borderColor: "teal.500", outlineColor: "teal.500" }}
                                    type="text"
                                    {...register("displayName", {
                                        minLength: { value: 2, message: "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞" },
                                        maxLength: { value: 30, message: "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤" },
                                        pattern: { value: /^[A-Za-z–ê-–Ø–∞-—è–Å—ë]+$/, message: "–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã" }
                                    })} />
                                {errors.displayName && <Field.ErrorText>{errors.displayName.message}</Field.ErrorText>}
                            </Field.Root>
                            <Field.Root invalid={!!errors.email}>
                                <Field.Label>–í–∞—à–µ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ü–æ—á—Ç–∞</Field.Label>
                                <HStack w={"100%"} >
                                    <Input
                                        disabled={!user?.emailVerified}
                                        _focus={errors.email ? { outlineColor: "border.error" } : { borderColor: "teal.500", outlineColor: "teal.500" }}
                                        type="email"
                                        {...register("email", {
                                            pattern: { value: /^\S+@\S+\.\S+$/, message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email" }
                                        })}
                                        required />
                                    {!user?.emailVerified && (
                                        <Button onClick={async () => {
                                            if (user) {
                                                await sendEmailVerification(user).then(() => toaster.success({ title: "–ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" })).catch((e) => toaster.error({ title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞" + e.message }))
                                            }
                                        }} >–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</Button>
                                    )}
                                </HStack>
                                {!user?.emailVerified && <Field.HelperText>–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.</Field.HelperText>}
                                {errors.email && <Field.ErrorText>{errors.email.message}</Field.ErrorText>}
                            </Field.Root>
                            {watch("email") === user?.email ? (
                                <>
                                    <Field.Root>
                                        <Field.Label>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</Field.Label>
                                        <HStack w="100%" >
                                            <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—á—Ç—ã" ></Input>
                                            <Button colorPalette="orange" >
                                                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                                            </Button>
                                        </HStack>
                                        <Field.HelperText color="orange" >–í–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–º–µ–Ω—ã –ø–æ—á—Ç—ã</Field.HelperText>
                                    </Field.Root>
                                </>
                            ) : null}
                            <Field.Root invalid={!!errors.password}>
                                <Field.Label> –í–∞—à –Ω–æ–≤—ã–π –ü–∞—Ä–æ–ª—å </Field.Label>
                                <Input
                                    _focus={errors.password ? { outlineColor: "border.error" } : { borderColor: "teal.500", outlineColor: "teal.500" }}
                                    type="password"
                                    {...register("password", {
                                        minLength: { value: 6, message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤" }
                                    })}
                                />
                                {errors.password && <Field.ErrorText>{errors.password.message}</Field.ErrorText>}
                            </Field.Root>
                            <Field.Root invalid={!!errors.photoURL}>
                                <Field.Label>–ù–æ–≤–∞—è –∞–≤—Ç–∞—Ä–∫–∞</Field.Label>
                                <Input {...register("photoURL")} />
                                <Field.HelperText>–°–µ–π—á–∞—Å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –ø–æ —Å—Å—ã–ª–∫–µ. –í –±—É–¥—É—â–µ–º –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞! üòä</Field.HelperText>
                                <Field.ErrorText>Error</Field.ErrorText>
                            </Field.Root>
                            <Fieldset.ErrorText>–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã</Fieldset.ErrorText>
                            <Button type="submit" > –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ </Button>
                        </Fieldset.Content>
                    </form>
                </Fieldset.Root>
            </Container>
        </Box>
    )
}


export default ProfileEdit